/*! Cordial v0.1.3 | GPL 3.0 License | https://github.com/lylerohr/nuclear */
/************************************

	Cordial
	Main Scss file

	Cordial is a Sass and Atomic based framework that models the canonical
	CSS Zen Garden minimalism and separation of scope.  The aim is to free
	your markup form framework-specific classes and allow for full structural
	and theme control via CSS.

	Cordial utilizes the Brad Frost's, Atomic Design Methodology
	(http://atomicdesign.bradfrost.com/) to organize absolutely everything.


	TODO:
	1. Create a nuclear-config.scss
		> Allows user to include/exclude scss files using a map
	2. Create a comment design pattern
		> Fully comment code to act as initial documentation
	3. Optimize constructor default output
		> Optimize default placeholder classes


************************************/
@import url(../../bower_components/normalize-css/normalize.css);
/********************

FUNCTIONS

********************/
/*************************
	
	UTILITIES

*************************/
/*************************
	
	MAP FUNCTIONS - STRUCTURE LAYER

*************************/
/*************************
	
	MAP FUNCTIONS - THEME LAYER

*************************/
/************************************

	CONSTRUCTORS

	TODO: explore using a map of maps for constructor inputs

************************************/
/*
	IN PROGRESS
============================================================================ */
html {
  font-size: 16px !important; }

body {
  margin: 0; }

/*******

	NuclearSass Framework
	Theme Configuration

	v0.1 alpha

*******/
/************************************

	TYPOGRAPHY

************************************/
/************************************

	COLORS

************************************/
/************************************

	CHROME

************************************/
/* 
	
	$type-sizes 
		> type-size name 
			> screen-size name
			
	primarily utilized to create type size classes found in _type-sizes.scss
	
*/
/************************************
	
	Atoms

************************************/
/************************************

	BUTTONS

************************************/
/************************************
	DEFAULT BUTTON CONFIG

	Use this to create your base button atom.
	You may overwrite/extend and, all, or none of the CSS properties using the $button map.

************************************/
.mid-button {
  display: inline-block;
  margin: 0;
  padding: 1rem 2rem;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-weight: inherit;
  color: #cd453d;
  line-height: inherit;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  background-color: transparent;
  border: 2px solid #cd453d;
  white-space: nowrap;
  size: base;
  font-size: 1rem;
  border-radius: 0.3rem;
  font-size: 0.75rem;
  line-height: 0.825rem; }
  .mid-button:hover {
    background-color: #cd453d;
    color: #ffffff; }
  .mid-button:active, .mid-button:focus {
    background-color: #bf3931;
    color: #ffffff;
    outline: none; }
  @media screen and (min-width: 768px) {
    .mid-button {
      font-size: 0.875rem;
      line-height: 1.05rem; } }
  @media screen and (min-width: 992px) {
    .mid-button {
      font-size: 1rem;
      line-height: 1.3rem; } }
  @media screen and (min-width: 1200px) {
    .mid-button {
      font-size: 1.1rem;
      line-height: 1.54rem; } }

/************************************
	EO DEFAULT BUTTON CONFIG
************************************/
/************************************

	BUTTON MODIFIERS

	To create a new modifier, create a new button map.
	The button map must contain a "name" key.

	To instnciate, @include the button() mixin with the fourth argument as your new button map.

	Example:

	$NEW-button: (
		name: 'NEW-button',
		css-property: value,
	);
	@include button($button, $button-hover, $button-active, $NEW-button);

************************************/
.big-button {
  display: inline-block;
  margin: 0.5rem 0;
  padding: 2rem 4rem;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-weight: inherit;
  color: #cd453d;
  line-height: inherit;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  background-color: transparent;
  border: 2px solid #cd453d;
  white-space: nowrap;
  size: base;
  font-size: 2rem;
  border-radius: 0.3rem;
  font-size: 0.75rem;
  line-height: 0.825rem; }
  .big-button:hover {
    background-color: #cd453d;
    color: #ffffff; }
  .big-button:active, .big-button:focus {
    background-color: #bf3931;
    color: #ffffff;
    outline: none; }
  @media screen and (min-width: 768px) {
    .big-button {
      font-size: 0.875rem;
      line-height: 1.05rem; } }
  @media screen and (min-width: 992px) {
    .big-button {
      font-size: 1rem;
      line-height: 1.3rem; } }
  @media screen and (min-width: 1200px) {
    .big-button {
      font-size: 1.1rem;
      line-height: 1.54rem; } }

.small-button {
  display: inline-block;
  margin: 0;
  padding: 0.5rem 1rem;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-weight: inherit;
  color: #cd453d;
  line-height: inherit;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  background-color: transparent;
  border: 2px solid #cd453d;
  white-space: nowrap;
  size: base;
  font-size: 0.875rem;
  border-radius: 0.3rem;
  font-size: 0.75rem;
  line-height: 0.825rem; }
  .small-button:hover {
    background-color: #cd453d;
    color: #ffffff; }
  .small-button:active, .small-button:focus {
    background-color: #bf3931;
    color: #ffffff;
    outline: none; }
  @media screen and (min-width: 768px) {
    .small-button {
      font-size: 0.875rem;
      line-height: 1.05rem; } }
  @media screen and (min-width: 992px) {
    .small-button {
      font-size: 1rem;
      line-height: 1.3rem; } }
  @media screen and (min-width: 1200px) {
    .small-button {
      font-size: 1.1rem;
      line-height: 1.54rem; } }

/************************************
	
	HEADINGS

************************************/
/************************************
	DEFAULT HEADING CONFIG
	
	Use this to create your base heading atom(s).
	You may overwrite/extend and, all, or none of the CSS properties using the $heading map.
	
************************************/
/************************************
	EO DEFAULT HEADING CONFIG
************************************/
/************************************
	
	HEADING MODIFIERS
	
	To create a new modifier, create a new heading map.
	The heading map must contain a 'name' key.
		> 'name' is used to create the placeholder class.
	
	Responsive Type:
	If you want to utilize structured, responsive type, use the 'size' key.
	
	To instnciate, @include the heading() mixin with the fourth argument as your new heading map.
	
	Example:
	
	$NEW-heading: (
		name: 'NEW-heading',
		size: 'size', 
		css-property: value, 
	);
	@include heading($heading, $NEW-heading);
	
************************************/
h1 {
  display: inline-block;
  margin: 1rem 0 2rem;
  padding: 0;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-weight: 500;
  color: #cd453d;
  text-align: left;
  vertical-align: inherit;
  touch-action: auto;
  cursor: inherit;
  background-image: none;
  background-color: transparent;
  border: none #777777;
  white-space: normal;
  font-size: 4.5rem;
  line-height: 4.95rem; }
  @media screen and (min-width: 768px) {
    h1 {
      font-size: 5.25rem;
      line-height: 6.3rem; } }
  @media screen and (min-width: 992px) {
    h1 {
      font-size: 6rem;
      line-height: 7.8rem; } }
  @media screen and (min-width: 1200px) {
    h1 {
      font-size: 6.6rem;
      line-height: 9.24rem; } }

small {
  display: inline-block;
  margin: 1rem 0 1.5rem;
  padding: 0;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-weight: 100;
  color: #6a6a6a;
  text-align: left;
  vertical-align: inherit;
  touch-action: auto;
  cursor: inherit;
  background-image: none;
  background-color: transparent;
  border: none #777777;
  white-space: normal;
  margin-left: 1rem;
  font-size: 1.125rem;
  line-height: 1.2375rem; }
  @media screen and (min-width: 768px) {
    small {
      font-size: 1.3125rem;
      line-height: 1.575rem; } }
  @media screen and (min-width: 992px) {
    small {
      font-size: 1.5rem;
      line-height: 1.95rem; } }
  @media screen and (min-width: 1200px) {
    small {
      font-size: 1.65rem;
      line-height: 2.31rem; } }

/************************************
	
	INPUTS

************************************/
/************************************
	DEFAULT INPUT CONFIG
	
	Use this to create your base input atom.
	You may overwrite/extend and, all, or none of the CSS properties using the $input map.
	
************************************/
/************************************
	EO DEFAULT INPUT CONFIG
************************************/
/************************************
	
	INPUT MODIFIERS
	
	To create a new modifier, create a new input map.
	The input map must contain a "name" key.
	
	The input map may also contain the 'form-element' key and the 'element-type' key.
		> 	'form-element' indicates the primary form tag (e.g. input, textarea, select, etc.) 
			and applies additional default styles to help it render properly.
		> 	'input-type' is most useful for 'form-element: input' as it has many types 
			(e.g. text, date, radio, etc.)
	
	To instantiate, @include the input() mixin with the fourth argument as your new input map.
	
	Example:
	
	$NEW-input: (
		name: 'NEW-input',
		form-element: INPUT,
		element-type: TYPE,
		css-property: value, 
	);
	@include button($button, $button-hover, $button-active, $NEW-button);
	
************************************/
.thing {
  display: block;
  width: 100%;
  height: inherit;
  margin: 1rem 0;
  padding: 0;
  font-size: 1rem;
  line-height: 1.3;
  color: #444444;
  background-color: transparent;
  background-image: none;
  border: 0.1rem solid #777777;
  border-radius: 0.25rem;
  box-shadow: none;
  box-sizing: border-box;
  transition: outline-color 100ms;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-size: 0.75rem;
  line-height: 0.825rem;
  display: inline;
  width: initial; }
  @media screen and (min-width: 768px) {
    .thing {
      font-size: 0.875rem;
      line-height: 1.05rem; } }
  @media screen and (min-width: 992px) {
    .thing {
      font-size: 1rem;
      line-height: 1.3rem; } }
  @media screen and (min-width: 1200px) {
    .thing {
      font-size: 1.1rem;
      line-height: 1.54rem; } }
  .thing::-ms-expand {
    border: 0;
    background-color: transparent; }
  [disabled].thing, [readonly].thing,
  fieldset[disabled] .thing {
    background-color: #6a6a6a;
    opacity: 1; }
  .thing:focus {
    outline-color: #ecbab7; }

/************************************

	LINKS

************************************/
/************************************
	DEFAULT LINK CONFIG

	Use this to create your base text atom(s).
	You may overwrite/extend and, all, or none of the CSS properties using the $text map.

************************************/
a {
  display: inline;
  margin: 0;
  padding: 0;
  font-family: Georgia, Times New Roman, sans-serif;
  font-weight: inherit;
  color: #bf3931;
  text-align: left;
  vertical-align: inherit;
  touch-action: auto;
  cursor: pointer;
  background-image: none;
  background-color: transparent;
  border: none #777777;
  transition: 250ms;
  white-space: normal;
  font-size: 0.75rem;
  line-height: 0.825rem; }
  a:hover {
    color: #822722; }
  a:active, a:focus {
    color: #bf3931; }
  @media screen and (min-width: 768px) {
    a {
      font-size: 0.875rem;
      line-height: 1.05rem; } }
  @media screen and (min-width: 992px) {
    a {
      font-size: 1rem;
      line-height: 1.3rem; } }
  @media screen and (min-width: 1200px) {
    a {
      font-size: 1.1rem;
      line-height: 1.54rem; } }

/************************************
	EO DEFAULT TEXT CONFIG
************************************/
/************************************

	TEXT MODIFIERS

	To create a new modifier, create a new text map.
	The text map must contain a 'name' key.
		> 'name' is used to create the placeholder class.

	Responsive Type:
	If you want to utilize structured, responsive type, use the 'size' key.

	To instnciate, @include the text() mixin with the fourth argument as your new button map.

	Example:

	$NEW-text: (
		name: 'NEW-text',
		size: SIZE,
		css-property: value,
	);
	@include button($heading, $NEW-heading);

************************************/
/************************************

	TEXT

************************************/
/************************************
	DEFAULT HEADING CONFIG

	Use this to create your base text atom(s).
	You may overwrite/extend and, all, or none of the CSS properties using the $text map.

************************************/
p {
  display: block;
  margin: 0;
  padding: 0;
  font-family: Georgia, Times New Roman, sans-serif;
  font-weight: inherit;
  color: #444444;
  text-align: left;
  vertical-align: inherit;
  touch-action: auto;
  cursor: inherit;
  background-image: none;
  background-color: transparent;
  border: none #777777;
  white-space: normal;
  font-size: 0.75rem;
  line-height: 0.825rem; }
  @media screen and (min-width: 768px) {
    p {
      font-size: 0.875rem;
      line-height: 1.05rem; } }
  @media screen and (min-width: 992px) {
    p {
      font-size: 1rem;
      line-height: 1.3rem; } }
  @media screen and (min-width: 1200px) {
    p {
      font-size: 1.1rem;
      line-height: 1.54rem; } }

/************************************
	EO DEFAULT TEXT CONFIG
************************************/
/************************************

	TEXT MODIFIERS

	To create a new modifier, create a new text map.
	The text map must contain a 'name' key.
		> 'name' is used to create the placeholder class.

	Responsive Type:
	If you want to utilize structured, responsive type, use the 'size' key.

	To instnciate, @include the text() mixin with the fourth argument as your new button map.

	Example:

	$NEW-text: (
		name: 'NEW-text',
		size: SIZE,
		css-property: value,
	);
	@include button($heading, $NEW-heading);

************************************/
.blockquote {
  display: block;
  margin: 0;
  padding: 1rem;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  font-weight: 100;
  color: #444444;
  text-align: left;
  vertical-align: inherit;
  touch-action: auto;
  cursor: inherit;
  background-image: none;
  background-color: #f7f6f6;
  border: none #777777;
  white-space: normal;
  border-radius: 0.5rem;
  font-size: 1.125rem;
  line-height: 1.2375rem; }
  @media screen and (min-width: 768px) {
    .blockquote {
      font-size: 1.3125rem;
      line-height: 1.575rem; } }
  @media screen and (min-width: 992px) {
    .blockquote {
      font-size: 1.5rem;
      line-height: 1.95rem; } }
  @media screen and (min-width: 1200px) {
    .blockquote {
      font-size: 1.65rem;
      line-height: 2.31rem; } }

/*

<div class="media ">

  <a href="#" class="img">
    <img src="http://stubbornella.com/profile_image.jpg" alt="me" />
  </a>

  <div class="bd">
    @Stubbornella 14 minutes ago
  </div>

</div>

*/
.media {
  margin: 10px; }

.media,
.body {
  overflow: hidden;
  _overflow: visible;
  zoom: 1; }

.media .img {
  float: left;
  margin-right: 10px; }

.media .img img {
  display: block; }

.media .imgExt {
  float: right;
  margin-left: 10px; }

.buttons .box {
  width: calc(33.3333333333% - 26.6666666667px);
  float: left;
  margin-left: 20px;
  text-align: center; }

.neat-container::after {
  clear: both;
  content: "";
  display: block; }

.box {
  width: calc(25% - 25px);
  float: left;
  margin-left: 20px; }

.quote {
  width: calc(33.3333333333% - 26.6666666667px);
  float: left;
  margin-left: 20px; }

.media-list {
  width: calc(50% - 30px);
  float: left;
  margin-left: 20px; }
