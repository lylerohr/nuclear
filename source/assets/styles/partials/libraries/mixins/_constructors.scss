/************************************

	CONSTRUCTORS

	TODO: explore using a map of maps for constructor inputs

************************************/


// button constructor
@mixin button($default: (), $hover: (), $active: (), $modifier: (), $before: (), $after: ()) {
	// default config styles
	$default: extend((
		display: inline-block,
		margin: 0,
		padding: #{1rem 2rem},
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		line-height: inherit,
		text-align: center,
		vertical-align: middle,
		touch-action: manipulation,
		cursor: pointer,
		background-image: none,
		background-color: transparent,
		border: border(hairline, transparent),
		white-space: nowrap,
		size: base, /* used to set default responsive-type() */
		name: 'button', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != type and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@include state-selectors($hover, $active);
		@include pseudo-classes($before, $after);
		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}


// heading constructor
@mixin heading($default: (), $modifier: ()) {
	// default config styles
	$default: extend((
		display: block,
		margin: 1rem 0 1.5rem,
		padding: 0,
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		text-align: left,
		vertical-align: inherit,
		touch-action: auto,
		cursor: inherit,
		background-image: none,
		background-color: transparent,
		border: border(none),
		white-space: normal,
		size: base,  /* can use for preset theming within constructor */
		name: 'heading', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != size and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}

// text constructor
@mixin text($default: (), $modifier: ()) {
	// default config styles
	$default: extend((
		display: block,
		margin: 0,
		padding: 0,
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		text-align: left,
		vertical-align: inherit,
		touch-action: auto,
		cursor: inherit,
		background-image: none,
		background-color: transparent,
		border: border(none),
		white-space: normal,
		size: base,  /* can use for preset theming within constructor */
		name: 'text', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);
	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != size and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}

// link constructor
@mixin link($default: (), $hover: (), $active: (), $modifier: (), $before: (), $after: ()) {
	// default config styles
	$default: extend((
		display: inline,
		margin: 0,
		padding: 0,
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		text-align: left,
		vertical-align: inherit,
		touch-action: auto,
		cursor: inherit,
		background-image: none,
		background-color: transparent,
		border: border(none),
		transition: transition(base),
		white-space: normal,
		size: base,  /* can use for preset theming within constructor */
		name: 'link', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != size and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}

		@include state-selectors($hover, $active);

		@include pseudo-classes($before, $after);

		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}


/*
	IN PROGRESS
============================================================================ */

// form input constructor
@mixin input($default: (), $focus: (),  $modifier: ()) {
	// default config styles
	$default: extend((
		display: block,
		width: 100%,
		height: inherit,
		margin: margin(none),
		padding: padding(base),
		font-size: rem(font-size(base)),
		line-height: lh(base),
		color: color(gray, extra-dark),
		background-color: transparent,
		background-image: none,
		border: borders(hairline, gray, dark),
		border-radius: radius(base),
		box-shadow: none,
		box-sizing: border-box,
		transition: transition(base),
		form-element: input, /* can use for preset theming within constructor */
		element-type: text,  /* can use for preset theming within constructor */
		size: base,
		name: 'input', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)[type="map-get($modifier, element-type)"]} {
		@each $name, $value in $modifier {
			@if $name != size and $name != name and $name != form-element and $name != element-type and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@include type-sizes-responsive(map-get($modifier, size));


		@if map-get($modifier, form-element) == input {
			@if map-get($modifier, element-type) == text {

			} @else if map-get($modifier, element-type) == password {

			} @else if map-get($modifier, element-type) == datetime {

			} @else if map-get($modifier, element-type) == datetime-local {

			} @else if map-get($modifier, element-type) == date {

			} @else if map-get($modifier, element-type) == month {

			} @else if map-get($modifier, element-type) == time {

			} @else if map-get($modifier, element-type) == week {

			} @else if map-get($modifier, element-type) == number {

			} @else if map-get($modifier, element-type) == email {

			} @else if map-get($modifier, element-type) == url {

			} @else if map-get($modifier, element-type) == search {

			} @else if map-get($modifier, element-type) == tel {

			} @else if map-get($modifier, element-type) == color {

			} @else if map-get($modifier, element-type) == radio {
				display: inline;
				width: initial;
			} @else {
				@warn "Input Constructor Error: No such input element-type- - '#{map-get($modifier, element-type)}.";
			}
		} @else if map-get($modifier, form-element) == textarea {
			height: auto;
		} @else if map-get($modifier, form-element) == button {

		}  @else if map-get($modifier, form-element) == select {

		} @else if map-get($modifier, form-element) == label {

		} @else if map-get($modifier, form-element) == output {

		} @else if map-get($modifier, form-element) == datalist {

		} @else {
			@warn "Input Constructor Error: No such input form-element- - '#{map-get($modifier, form-element)}.";
		}

		&::-ms-expand {
			border: 0;
			background-color: transparent;
  		}
		&[disabled],
		&[readonly],
		fieldset[disabled] & {
			background-color: color(gray, dark);
			opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
		}
		&:focus {
			@each $name, $value in $focus {
				#{$name}: #{$value};
			}
		}
	}
}




// label constructor
@mixin label($default: (), $modifier: ()) {
	// default config styles
	$default: extend((
		display: block,
		margin: 1rem 0 1.5rem,
		padding: 0,
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		text-align: left,
		vertical-align: inherit,
		touch-action: auto,
		cursor: inherit,
		background-image: none,
		background-color: transparent,
		border: none,
		white-space: normal,
		type: base,  /* can use for preset theming within constructor */
		size: base,
		name: 'label', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != type and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}

// label constructor
@mixin alert($default: (), $modifier: ()) {
	// default config styles
	$default: extend((
		display: block,
		margin: 1rem 0 1.5rem,
		padding: 0,
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		text-align: left,
		vertical-align: inherit,
		touch-action: auto,
		cursor: inherit,
		background-image: none,
		background-color: transparent,
		border: none,
		white-space: normal,
		type: base,  /* can use for preset theming within constructor */
		size: base,
		name: 'label', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != type and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}

// badge constructor
@mixin badge($default: (), $modifier: ()) {
	// default config styles
	$default: extend((
		display: block,
		margin: 1rem 0 1.5rem,
		padding: 0,
		font-family: inherit,
		font-weight: inherit,
		color: color(black),
		text-align: left,
		vertical-align: inherit,
		touch-action: auto,
		cursor: inherit,
		background-image: none,
		background-color: transparent,
		border: none,
		white-space: normal,
		type: base,  /* can use for preset theming within constructor */
		size: base,
		name: 'label', /* used to create placeholder class name */
		responsive-type: true,
	), $default);

	$modifier: extend($default, $modifier);

	// create placeholder class merging $default map styles and $modifier map styles
	%#{map-get($modifier, name)} {
		@each $name, $value in $modifier {
			@if $name != type and $name != name and $name !=responsive-type {
				#{$name}: #{$value};
			}
		}
		@if map-get($modifier, responsive-type) == true {
			@include type-sizes-responsive(map-get($modifier, size));
		}
	}
}
